<ContentControl x:Class="WpfControlSamples.Views.Menus.MultiBinding1Page"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                xmlns:local="clr-namespace:WpfControlSamples.Views.Menus"
                xmlns:conv="clr-namespace:WpfControlSamples.Views.Converters"
                mc:Ignorable="d" 
                d:DesignHeight="450" d:DesignWidth="800">

    <ContentControl.Resources>
        <ResourceDictionary>
            <conv:BooleansAreAllTrueVisibleConverter x:Key="BoolsAllTrueVisibleConverter"/>
            <conv:BooleansAreAllFalseCollapsedConverter x:Key="BoolsAllFalseCollapsedConverter"/>
            <conv:BooleansAreAllFalseConverter x:Key="BoolsAllFalseConverter"/>
            
            <Style TargetType="{x:Type CheckBox}" >
                <Setter Property="Margin" Value="20,5" />
            </Style>
        </ResourceDictionary>
    </ContentControl.Resources>

    <StackPanel Margin="10" >
        <TextBlock Margin="0,10" FontSize="{StaticResource FontSizeMedium}"
                   Text="MultiBinding1 (IMultiValueConverter)" />

        <CheckBox x:Name="check1" Content="Check1" />
        <CheckBox x:Name="check2" Content="Check2" IsChecked="True" />
        <CheckBox x:Name="check3" Content="Check3" />

        <DockPanel Margin="20,10" Background="LightBlue" Height="110" >
            <TextBlock DockPanel.Dock="Top" Margin="5" >
                各フラグに応じた Visibility を返す 2つの IMultiValueConverter を使用。
                <LineBreak/>
                戻り値が Visibility なので、他で使い回しが効かずイマイチ…
                <LineBreak/>
                　(Visibility を Opacity に変えたい のような仕様変更に対応できない)
                <LineBreak/>
                専用の IMultiValueConverter クラスを作ってる甲斐があって、xaml はスッキリしている。
            </TextBlock>
            <TextBlock Text="Observing flags are all true..."
                       Margin="20,5" FontSize="{StaticResource FontSizeSmall}" Foreground="Blue" >
                <TextBlock.Visibility>
                    <MultiBinding Converter="{StaticResource BoolsAllTrueVisibleConverter}">
                        <Binding Path="IsChecked" ElementName="check1" Mode="OneWay" />
                        <Binding Path="IsChecked" ElementName="check2" Mode="OneWay" />
                        <Binding Path="IsChecked" ElementName="check3" Mode="OneWay" />
                    </MultiBinding>
                </TextBlock.Visibility>
            </TextBlock>
            <TextBlock Text="Observing flags are all false..."
                       Margin="20,5" FontSize="{StaticResource FontSizeSmall}" Foreground="Red" >
                <TextBlock.Visibility>
                    <MultiBinding Converter="{StaticResource BoolsAllFalseCollapsedConverter}">
                        <Binding Path="IsChecked" ElementName="check1" Mode="OneWay" />
                        <Binding Path="IsChecked" ElementName="check2" Mode="OneWay" />
                        <Binding Path="IsChecked" ElementName="check3" Mode="OneWay" />
                    </MultiBinding>
                </TextBlock.Visibility>
            </TextBlock>
        </DockPanel>

        <DockPanel Margin="20,10" Background="LightGreen" >
            <TextBlock DockPanel.Dock="Top" Margin="5" >
                全フラグが false かをチェックする 1つの IMultiValueConverter のみを使用。 この実装がベスト！
                <LineBreak/>
                bools ⇒ bool の IMultiValueConverter は他でも使用できそうなのでベネ！
                <LineBreak/>
                True/False 両方の xaml を書く必要があるが、False 条件は True条件 の not で済むので、複雑ではない。
            </TextBlock>
            <TextBlock Text="Observing flags are all false..."
                       Margin="30,5" FontSize="{StaticResource FontSizeSmall}" Foreground="Red" >
                <TextBlock.Style>
                    <Style TargetType="{x:Type TextBlock}" >
                        <Style.Triggers>
                            <DataTrigger Value="True" >
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{StaticResource BoolsAllFalseConverter}" >
                                        <Binding Path="IsChecked" Source="{x:Reference Name=check1}" Mode="OneWay" />
                                        <Binding Path="IsChecked" Source="{x:Reference Name=check2}" Mode="OneWay" />
                                        <Binding Path="IsChecked" Source="{x:Reference Name=check3}" Mode="OneWay" />
                                    </MultiBinding>
                                </DataTrigger.Binding>
                                <DataTrigger.Setters>
                                    <Setter Property="Opacity" Value="1" />
                                </DataTrigger.Setters>
                            </DataTrigger>

                            <DataTrigger Value="False" >
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{StaticResource BoolsAllFalseConverter}" >
                                        <Binding Path="IsChecked" Source="{x:Reference Name=check1}" Mode="OneWay" />
                                        <Binding Path="IsChecked" Source="{x:Reference Name=check2}" Mode="OneWay" />
                                        <Binding Path="IsChecked" Source="{x:Reference Name=check3}" Mode="OneWay" />
                                    </MultiBinding>
                                </DataTrigger.Binding>
                                <DataTrigger.Setters>
                                    <Setter Property="Opacity" Value="0.2" />
                                </DataTrigger.Setters>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </DockPanel>

        <!-- MultiDataTrigger版（参考）-->
        <DockPanel Margin="20,10" Background="LightPink" >
            <TextBlock DockPanel.Dock="Top" Margin="5" >
                MultiDataTrigger を使って、xaml 上で 各フラグ値 の True / False をチェックしている。
                <LineBreak/>
                と言う訳で、IMultiValueConverter は使っておらず、参考。
                <LineBreak/>
                True/False 両方の条件を xaml で書く必要があり、可読性悪くイマイチ。
            </TextBlock>
            <TextBlock Text="Observing flags are all true"
                       Margin="30,5" FontSize="{StaticResource FontSizeSmall}" Foreground="Blue" >
                <TextBlock.Style>
                    <Style TargetType="{x:Type TextBlock}" >
                        <Style.Triggers>
                            <!-- And de Visible -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Source={x:Reference Name=check1}, Path=IsChecked, Mode=OneWay}" Value="True" />
                                    <Condition Binding="{Binding Source={x:Reference Name=check2}, Path=IsChecked, Mode=OneWay}" Value="True" />
                                    <Condition Binding="{Binding Source={x:Reference Name=check3}, Path=IsChecked, Mode=OneWay}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" Value="1" />
                            </MultiDataTrigger>

                            <!-- Or de Collapsed -->
                            <DataTrigger Binding="{Binding Source={x:Reference Name=check1}, Path=IsChecked, Mode=OneWay}" Value="False" >
                                <Setter Property="Opacity" Value="0.2" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Reference Name=check2}, Path=IsChecked, Mode=OneWay}" Value="False" >
                                <Setter Property="Opacity" Value="0.2" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Reference Name=check3}, Path=IsChecked, Mode=OneWay}" Value="False" >
                                <Setter Property="Opacity" Value="0.2" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </DockPanel>

    </StackPanel>

</ContentControl>
