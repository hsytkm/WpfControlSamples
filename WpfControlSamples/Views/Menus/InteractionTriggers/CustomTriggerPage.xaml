<ContentControl x:Class="WpfControlSamples.Views.Menus.CustomTriggerPage"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                xmlns:system="clr-namespace:System;assembly=System.Runtime"
                xmlns:local="clr-namespace:WpfControlSamples.Views.Menus"
                xmlns:conv="clr-namespace:WpfControlSamples.Views.Converters"
                xmlns:trigger="clr-namespace:WpfControlSamples.Views.Triggers"
                xmlns:action="clr-namespace:WpfControlSamples.Views.Actions"
                mc:Ignorable="d" 
                d:DesignHeight="450" d:DesignWidth="800">

    <ContentControl.Resources>
        <ResourceDictionary>
            <system:Boolean x:Key="BoolTrue">True</system:Boolean>
            <system:Boolean x:Key="BoolFalse">False</system:Boolean>
            <Brush x:Key="BrushTrue">LightBlue</Brush>
            <Brush x:Key="BrushFalse">LightPink</Brush>
        </ResourceDictionary>
    </ContentControl.Resources>
    
    <StackPanel Margin="10" >
        <TextBlock Margin="0,10" FontSize="{StaticResource FontSizeMedium}"
                   Text="自作Trigger" />

        <TextBlock Margin="10" FontSize="{StaticResource FontSizeMicro}" >
            2秒間隔で CanExecute() を切り替えおり、他のコントロールの動作も変える。
            <LineBreak/>
            素直に ViewModel で bool 作ってバインドした方が良いかも…
        </TextBlock>

        <Button Margin="30,10" Padding="10" Content="IntervalCommand"
                Command="{Binding IntervalCommand, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type local:CustomTriggerPage}}}" />

        <TextBox Margin="30,10"
                 Text="Command.CanExecute() で TextBox.IsEnabled を切り替える" >
            <i:Interaction.Triggers>
                <trigger:CommandCanExecuteChangedTrigger Command="{Binding IntervalCommand, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type local:CustomTriggerPage}}}" >
                    <!-- TargetedTriggerAction<T> から派生してるので TargetName とかも指定可能 -->
                    <action:ChangePropertyBooleanAction
                        PropertyName="IsEnabled"
                        ValueWhenTrue="{StaticResource BoolTrue}"
                        ValueWhenFalse="{StaticResource BoolFalse}" />
                </trigger:CommandCanExecuteChangedTrigger>
            </i:Interaction.Triggers>
        </TextBox>

        <TextBlock Margin="30,10" >
            <i:Interaction.Triggers>
                <trigger:CommandCanExecuteChangedTrigger Command="{Binding IntervalCommand, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type local:CustomTriggerPage}}}" >
                    <!-- TargetedTriggerAction<T> から派生してるので TargetName とかも指定可能 -->
                    <action:ChangePropertyBooleanAction
                        PropertyName="Text"
                        ValueWhenTrue="Command.CanExecute() -> True"
                        ValueWhenFalse="Command.CanExecute() -> False" />
                </trigger:CommandCanExecuteChangedTrigger>
            </i:Interaction.Triggers>
        </TextBlock>

        <Border Margin="30,10" Width="60" Height="60" >
            <i:Interaction.Triggers>
                <trigger:CommandCanExecuteChangedTrigger Command="{Binding IntervalCommand, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type local:CustomTriggerPage}}}" >
                    <!-- TargetedTriggerAction<T> から派生してるので TargetName とかも指定可能 -->
                    <action:ChangePropertyBooleanAction
                        PropertyName="Background"
                        ValueWhenTrue="{StaticResource BrushTrue}"
                        ValueWhenFalse="{StaticResource BrushFalse}" />
                </trigger:CommandCanExecuteChangedTrigger>
            </i:Interaction.Triggers>
        </Border>

    </StackPanel>

</ContentControl>
